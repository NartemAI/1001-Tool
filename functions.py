#functions
import math
import random
import os
import time
import socket
import subprocess
import platform
def coin_flip():
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç–∫–∏")
    z = "0"  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    while True:
        x = input("–ù–∞–∂–º–∏ Enter —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É, –∏–ª–∏ 0 —á—Ç–æ–±—ã –≤—ã–π—Ç–∏: ")

        if x == z:
            break

        # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        result = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"])
        print("–í—ã–ø–∞–ª–æ:", result)

    else:
        return

def Checking_a_prime_number():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 0")
    z = (0)  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    while True:

        i = int(input("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "))
        if i == z:
            break
        flag = True
        divisors = []

        if i == 1:
            print("–ù–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ")
        else:
            for s in range(2, int(math.sqrt(i)) + 1):
                if i % s == 0:
                    flag = False
                    divisors.append(s)
                    divisors.append(i // s)

            if flag:
                print("–ü—Ä–æ—Å—Ç–æ–µ")
            else:
                print("–ù–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ")
                divisors = sorted(set(divisors))
                print("–î–µ–ª–∏—Ç—Å—è –Ω–∞:", divisors)
    else:
        return


def LCM_GCD():
    print("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–û–ö –ò –ù–û–î (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 0)")
    z = "0"  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    while True:

        # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        while True:
            def is_prime(num):
                if num < 2:
                    return False
                for s in range(2, int(math.sqrt(num)) + 1):
                    if num % s == 0:
                        return False
                return True
            print("–†–∞–±–æ—Ç–∞ —Å 6+ –∑–Ω–∞—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç–æ–≤–∞—Ç—å—Å—è –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ!")
            A = int(input("–í–≤–µ–¥–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: "))
            B = int(input("–í–≤–µ–¥–∏ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: "))
            print("\n –°–µ–∫—É–Ω–¥–æ—á–∫—É...\n")

            pn = [n for n in range(2, max(A, B)+1) if is_prime(n)]
            N = len(pn)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ

            nA = A
            nB = B
            i = -1
            sA = [0] * N
            sB = [0] * N
            for M in pn:
                i = i + 1
                while A % M == 0:
                    sA[i] += 1
                    A //= M
                while B % M == 0:
                    sB[i] += 1
                    B //= M

            # –ù–û–î –∏ –ù–û–ö
            NOD = 1
            NOK = 1
            for i, M in enumerate(pn):
                NOD *= M ** min(sA[i], sB[i])
                NOK *= M ** max(sA[i], sB[i])

            print("–ù–û–î —á–∏—Å–ª–∞ ", nA, "–∏ —á–∏—Å–ª–∞ ", nB, " —Ä–∞–≤–µ–Ω = ", NOD)
            print("–ù–û–ö —á–∏—Å–ª–∞ ", nA, "–∏ —á–∏—Å–ª–∞ ", nB, " —Ä–∞–≤–µ–Ω = ", NOK)

            e = input("–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏ 0, –∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ Enter ")
            if e == z:
                 break
        if e == z:
            break



def text_to_binary():
    print("–¢–µ–∫—Å—Ç –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥ (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 0)")
    z = "0"  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    while True:
        x = input("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥: ")

        if x == z:
            break

        # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        binary_result = " ".join(format(ord(char), "08b") for char in x)
        print("–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥:", binary_result)

    else:
        return

def BMI():
    print("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ò–ú–¢ (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 0)")
    z = 0  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    while True:

        # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        h = float(input("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö: "))
        if h == z:
            break
        w = float(input("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–µ—Å –≤ –ö–ì: "))
        if w == z:
            break
        print("–†–∞—Å—á–µ—Ç...")
        bmi = int(10000 * w / (h * h))
        print("–¢–≤–æ–π –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞:", bmi)
        if bmi <= 18:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–µ—Å–∞")
        elif 18 < bmi <= 30:
            print("–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å")
        else:
            print("–í—ã—à–µ –Ω–æ—Ä–º—ã")
        if bmi == 0:
            print("–û–®–ò–ë–ö–ê, –ü–û–ü–†–û–ë–£–ô –ï–©–ï")
    else:
        return

def shutdown_timer():
    print("–¢–∞–π–º–µ—Ä –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
    z = "0"  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    while True:
    #–∫–æ–¥
        minutes = float(input("–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã): "))
        seconds = minutes * 60
        print("–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑", minutes, "–º–∏–Ω—É—Ç, –∏–ª–∏ —á–µ—Ä–µ–∑", seconds, "—Å–µ–∫—É–Ω–¥")
        os.system(f"shutdown /s /t {seconds}")
    else:
        return

def generate_password():
    print("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 0)")
    z = (0)  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    # —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤—Ä—É—á–Ω—É—é
    letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    digits = "0123456789"
    punctuation = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
    chars = letters + digits + punctuation

    while True:
        o = int(input("–°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ –ø–∞—Ä–æ–ª–µ? (–í–≤–µ–¥–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞) "))
        if o == z:
            break
        x = input("\n–ù–∞–∂–º–∏ Enter —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –∏–ª–∏ 0 —á—Ç–æ–±—ã –≤—ã–π—Ç–∏: ")
        if x == z:
            break
        password = "".join(random.choice(chars) for _ in range(o))
        print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", password)
    else:
        return

def check_password():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 0)")
    z = "0"  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    letters_lower = "abcdefghijklmnopqrstuvwxyz"
    letters_upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    digits = "0123456789"
    punctuation = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"

    while True:
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞: ")
        if password == z:
            break

        has_lower = any(c in letters_lower for c in password)
        has_upper = any(c in letters_upper for c in password)
        has_digit = any(c in digits for c in password)
        has_punct = any(c in punctuation for c in password)
        length_ok = len(password) >= 8
        length_bonus = len(password) >= 12

        score = 0
        score += 2 if length_ok else 0
        score += 2 if has_lower else 0
        score += 2 if has_upper else 0
        score += 2 if has_digit else 0
        score += 2 if has_punct else 0
        if length_bonus:
            score += 2

        if score >= 10:
            print(f"–ü–∞—Ä–æ–ª—å –°–£–ü–ï–† –Ω–∞–¥–µ–∂–Ω—ã–π ‚úÖ (–û—Ü–µ–Ω–∫–∞: {score}/10)")
        elif score == 10:
            print(f"–ü–∞—Ä–æ–ª—å –æ—á–µ–Ω—å –Ω–∞–¥—ë–∂–Ω—ã–π ‚úÖ (–û—Ü–µ–Ω–∫–∞: {score}/10)")
        elif score >= 7:
            print(f"–ü–∞—Ä–æ–ª—å –Ω–∞–¥—ë–∂–Ω—ã–π üëç (–û—Ü–µ–Ω–∫–∞: {score}/10)")
        else:
            print(f"–ü–∞—Ä–æ–ª—å —Å–ª–∞–±—ã–π ‚ùå (–û—Ü–µ–Ω–∫–∞: {score}/10)")

        print("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è:")
        if not length_ok:
            print("- –î–ª–∏–Ω–∞ –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
        if not has_lower:
            print("- –ù–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤")
        if not has_upper:
            print("- –ù–∞–ª–∏—á–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤")
        if not has_digit:
            print("- –ù–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä")
        if not has_punct:
            print("- –ù–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        return

def generate_login():
    print("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ–≥–∏–Ω–∞ (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 0)")
    z = "0"  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    # –Ω–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    words = ["–°at", "Dog", "Sun", "Moon", "Star", "Tree", "Book", "Sky", "Rain", "Fire"]

    while True:
        x = input("–ù–∞–∂–º–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ 0 —á—Ç–æ–±—ã –≤—ã–π—Ç–∏: ")
        if x == z:
            break

        # –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
        num_words = input("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤ –ª–æ–≥–∏–Ω–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2): ")
        if not num_words.isdigit():
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            continue
        num_words = int(num_words)

        # –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ñ—Ä—ã
        add_numbers = input("–î–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω–µ—Ü –ª–æ–≥–∏–Ω–∞? (–¥–∞/–Ω–µ—Ç): ").lower()
        add_numbers = add_numbers.startswith("–¥")  # True –µ—Å–ª–∏ '–¥–∞'

        # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞
        chosen_words = [random.choice(words) for _ in range(num_words)]
        login = "".join(chosen_words)

        # –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –±—É–∫–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if add_numbers:
            digits = "0123456789"
            num_digits = random.randint(4, 8)  # —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä
            login += "".join(random.choice(digits) for _ in range(num_digits))

        print("\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω:", login)
    else:
        return


def random_number():
    print("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª")
    exit_code = "0"

    while True:
        user_input = input("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-100) –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞: ")

        if user_input == exit_code:
            break

        if '-' in user_input:
            start, end = map(int, user_input.split('-'))
            result = random.randint(start, end)
            print(f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {result}")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü")

    return

def torque_calculator():
    print("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä—É—Ç—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ (–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞) ")
    z = (0)  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞

    while True:
        print(
            "\n–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ –õ–æ—à–∞–¥–∏–Ω—ã–º —Å–∏–ª–∞–º (–º–æ—â–Ω–æ—Å—Ç—å), –æ–±–æ—Ä–æ—Ç–∞–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–º—É —á–∏—Å–ª—É + —Ä–µ–¥—É–∫—Ç–æ—Ä\n")

        # –í–≤–æ–¥ –º–æ—â–Ω–æ—Å—Ç–∏
        hp = float(input("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –ª–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª–∞—Ö: "))
        if hp == z:
            break
        kw = hp * 0.7355  # –ø–µ—Ä–µ–≤–æ–¥ –≤ –∫–í—Ç

        # –û–±–æ—Ä–æ—Ç—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
        n_values = [1000, 2000, 3000, 4000, 5000, 6000]

        # –í–≤–æ–¥ –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω—ã—Ö —á–∏—Å–µ–ª
        gear1 = float(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è 1 –ø–µ—Ä–µ–¥–∞—á–∏ (*–≤–∞—à–µ —á–∏—Å–ª–æ* : 1): "))
        if gear1 == z:
            break
        r = float(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–µ–¥—É–∫—Ç–æ—Ä–∞ (*–≤–∞—à–µ —á–∏—Å–ª–æ* : 1): "))
        if r == z:
            break
        eta = float(input("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–ø–¥ –¥–ª—è —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏ –∏ —Ä–µ–¥—É–∫—Ç–æ—Ä–∞ (–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∞–ª–∏–∑–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ 0.93): "))
        if eta == z:
            break

        # –£–±—ã–≤–∞—é—â–∏–π —Ä—è–¥ –ø–µ—Ä–µ–¥–∞—á (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏)
        gear_multipliers = [1.0, 0.64, 0.43, 0.34, 0.26, 0.20, 0.16, 0.13]
        gear_values = [gear1 * m for m in gear_multipliers]

        print("\n–†–∞—Å—Å—á—ë—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É...\n")

        # –í—ã–≤–æ–¥ –ø–æ –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–¥–∞—á–µ
        for i, g in enumerate(gear_values, start=1):
            print(f"\n{i} –ø–µ—Ä–µ–¥–∞—á–∞ (gear = {g:.3f} : 1):")
            time.sleep(1)
            for n in n_values:
                # –ú–æ–º–µ–Ω—Ç –Ω–∞ –∫–æ–ª–µ–Ω–≤–∞–ª–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: M = P * 9550 / n
                torque_engine = (kw * 9550) / n
                # –ú–æ–º–µ–Ω—Ç –Ω–∞ –∫–æ–ª—ë—Å–∞—Ö —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ–¥–∞—á–∏, —Ä–µ–¥—É–∫—Ç–æ—Ä–∞ –∏ –ö–ü–î
                torque_wheel = torque_engine * g * r * eta
                if torque_wheel <= 5000:
                    print(f"{n} –æ–±/–º–∏–Ω ‚Üí –º–æ–º–µ–Ω—Ç –Ω–∞ –∫–æ–ª–µ–Ω–≤–∞–ª–µ: {torque_engine:.2f} –ù¬∑–º, –Ω–∞ –∫–æ–ª—ë—Å–∞—Ö: {torque_wheel:.2f} –ù¬∑–º")
                    time.sleep(0.2)
                elif torque_wheel <= 8500:
                    print(
                        f"{n} –æ–±/–º–∏–Ω ‚Üí –º–æ–º–µ–Ω—Ç –Ω–∞ –∫–æ–ª–µ–Ω–≤–∞–ª–µ: {torque_engine:.2f} –ù¬∑–º, –Ω–∞ –∫–æ–ª—ë—Å–∞—Ö: {torque_wheel:.2f} –ù¬∑–º \n–ü–†–û–ë–£–ö–°–û–í–ö–ê –ö–û–õ–ï–°! –ë–û–õ–¨–®–û–ô –ú–û–ú–ï–ù–¢!")
                    time.sleep(0.2)
                elif torque_wheel <= 10000:
                    print(
                        f"{n} –æ–±/–º–∏–Ω ‚Üí –º–æ–º–µ–Ω—Ç –Ω–∞ –∫–æ–ª–µ–Ω–≤–∞–ª–µ: {torque_engine:.2f} –ù¬∑–º, –Ω–∞ –∫–æ–ª—ë—Å–∞—Ö: {torque_wheel:.2f} –ù¬∑–º \n–ü–†–û–ë–£–ö–°–û–í–ö–ê –°–¶–ï–ü–õ–ï–ù–ò–Ø! –°–õ–ò–®–û–ú –ë–û–õ–¨–®–û–ô –ú–û–ú–ï–ù–¢!–ß–ï–†–ï–ó –í–†–ï–ú–Ø –ü–†–ò–í–û–î–ò–¢ –ö –ü–û–õ–û–ú–ö–ê–ú!")
                    time.sleep(0.2)
                elif torque_wheel <= 15000:
                    print(
                        f"{n} –æ–±/–º–∏–Ω ‚Üí –º–æ–º–µ–Ω—Ç –Ω–∞ –∫–æ–ª–µ–Ω–≤–∞–ª–µ: {torque_engine:.2f} –ù¬∑–º, –Ω–∞ –∫–æ–ª—ë—Å–∞—Ö: {torque_wheel:.2f} –ù¬∑–º \n–ü–û–õ–û–ú–ö–ê –®–ï–°–¢–ï–†–ù–ï–ô –ö–û–†–û–ë–ö–ò –ü–ï–†–ï–î–ê–ß! –í–´–ñ–ï–ì–ê–ù–ò–ï –°–¶–ï–ü–õ–ï–ù–ò–Ø! –°–õ–ò–®–û–ú –ë–û–õ–¨–®–û–ô –ú–û–ú–ï–ù–¢! –î–í–ò–ñ–ï–ù–ò–ï –ó–ê–¢–†–£–î–ù–ï–ù–û!")
                    time.sleep(0.2)
                elif torque_wheel <= 20000:
                    print(
                        f"{n} –æ–±/–º–∏–Ω ‚Üí –º–æ–º–µ–Ω—Ç –Ω–∞ –∫–æ–ª–µ–Ω–≤–∞–ª–µ: {torque_engine:.2f} –ù¬∑–º, –Ω–∞ –∫–æ–ª—ë—Å–∞—Ö: {torque_wheel:.2f} –ù¬∑–º \n–ú–ù–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–û–õ–û–ú–ö–ê –ö–û–†–û–ë–ö–ò –ü–ï–†–ï–î–ê–ß! –ú–ù–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–û–õ–û–ú–ö–ê –°–¶–ï–ü–õ–ï–ù–ò–Ø! –°–õ–ò–®–û–ú –ë–û–õ–¨–®–û–ô –ú–û–ú–ï–ù–¢! –î–í–ò–ñ–ï–ù–ò–ï –ù–ï–í–û–ó–ú–û–ñ–ù–û!")
                    time.sleep(0.2)
                elif torque_wheel >= 20000:
                    print(
                        f"{n} –æ–±/–º–∏–Ω ‚Üí –º–æ–º–µ–Ω—Ç –Ω–∞ –∫–æ–ª–µ–Ω–≤–∞–ª–µ: {torque_engine:.2f} –ù¬∑–º, –Ω–∞ –∫–æ–ª—ë—Å–∞—Ö: {torque_wheel:.2f} –ù¬∑–º \n–í–ó–†–´–í –ö–û–†–û–ë–ö–ò –ü–ï–†–ï–î–ê–ß! –†–ê–ó–†–´–í –ö–ê–†–î–ê–ù–û–í! –í–ï–†–û–Ø–¢–ù–´ –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–´–ï –£–ß–ï–ù–´–ú–ò –ü–û–õ–û–ú–ö–ò! –ù–ï–†–ï–ê–õ–ò–°–¢–ò–ß–ù–û –ë–û–õ–¨–®–û–ô –ú–û–ú–ï–ù–¢! –î–í–ò–ñ–ï–ù–ò–ï –ù–ï–†–ï–ê–õ–¨–ù–û!")
                    time.sleep(0.2)
    else:
        return

def ip_check():
    import socket
    import subprocess
    import platform

    print("\nIP checker (–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞) ")
    z = "0"  # –∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞
    start = input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ ")
    while True:
        if start == z:
            break
        print()

        def get_local_ip():
            """–ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã"""
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.connect(("8.8.8.8", 80))  # Google DNS
                local_ip = s.getsockname()[0]
                s.close()
                return local_ip
            except:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP"

        def get_ip_system_command():
            """–ü–æ–ª—É—á–∞–µ–º IP —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
            system = platform.system()
            try:
                if system == "Windows":
                    result = subprocess.run(['ipconfig'], capture_output=True, text=True, encoding='cp866')
                    output = result.stdout
                    lines = output.split('\n')
                    for line in lines:
                        if 'IPv4' in line or '–ê–¥–∞–ø—Ç–µ—Ä' in line:
                            if ':' in line and '.' in line:
                                return line.split(':')[-1].strip()
                elif system in ["Linux", "Darwin"]:
                    result = subprocess.run(['hostname', '-I'], capture_output=True, text=True)
                    return result.stdout.strip()
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"

        def get_network_info_complete():
            """–°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏"""
            hostname = socket.gethostname()
            local_ip = get_local_ip()
            system_ip = get_ip_system_command()
            return {
                'hostname': hostname,
                'local_ip_socket': local_ip,
                'system_ip_command': system_ip,
                'platform': platform.platform(),
                'system': platform.system()
            }

        # **–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π**
        print("=" * 60)
        print("–ü–û–õ–£–ß–ï–ù–ò–ï IP –ê–î–†–ï–°–ê")
        print("=" * 60)

        info = get_network_info_complete()

        print(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {info['system']}")
        print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {info['platform']}")
        print(f"–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {info['hostname']}")
        print(f"–õ–æ–∫–∞–ª—å–Ω—ã–π IP (wifi): {info['local_ip_socket']}")
        print(f"IP –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {info['system_ip_command']}")

        print("=" * 60)
        final = input("–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞: ")
        if final == z:
            break
    else:
        return
