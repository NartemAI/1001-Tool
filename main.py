import functions

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
name_functions = {
    0: "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º",
    1: "–ú–æ–Ω–µ—Ç–∫–∞",
    2: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ",
    3: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–û–ö –∏ –ù–û–î",
    4: "–¢–µ–∫—Å—Ç –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥",
    5: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ò–ú–¢",
    6: "–¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—é—á–µ–Ω–∏—è",
    7: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è",
    8: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è",
    9: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞"
}

kol_functions = len(name_functions)


def show_main_instructions():
    print("\t* –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞")
    print("\t* –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º")  # –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —ç—Ç–æ


print("–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π—Ç–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö, –≤–µ—Å–µ–ª—ã—Ö –∏ –Ω—É–∂–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º!")
show_main_instructions()

while True:
    i = input("#$ ")
    if i == "":
        break
    try:
        i = int(i)
    except ValueError:
        print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        continue

    if i == 0:
        # –ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º
        while True:
            print("–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ")
            print("0 - –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            for key in name_functions:
                if key != 0:
                    print(f"{key} - {name_functions[key]}")
            choice = input("#$ ")
            if choice == "":
                break
            try:
                choice = int(choice)
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
                continue

            if choice == 0:
                break
            elif choice == 1:
                functions.coin_flip()
            elif choice == 2:
                functions.Checking_a_prime_number()  # –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
            elif choice == 3:
                functions.LCM_GCD()
            elif choice == 4:
                functions.text_to_binary()
            elif choice == 5:
                functions.BMI()
            elif choice == 6:
                functions.shutdown_timer()
            elif choice == 7:
                functions.generate_password()
            elif choice == 8:
                functions.check_password()
            elif choice == 9:
                functions.generate_login()
            else:
                print("–¢–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ—Ç!ü§∑")
        show_main_instructions()  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–¥–º–µ–Ω—é
    elif i == 1:
        functions.coin_flip()
        show_main_instructions()  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    elif i == 2:
        functions.Checking_a_prime_number()  # –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
        show_main_instructions()  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    elif i == 3:
        functions.LCM_GCD()
        show_main_instructions()
    elif i == 4:
        functions.text_to_binary()
        show_main_instructions()
    elif i == 5:
        functions.BMI()
        show_main_instructions()
    elif i == 6:
        functions.shutdown_timer()
        show_main_instructions()
    elif i == 7:
        functions.generate_password()
        show_main_instructions()
    elif i == 8:
        functions.check_password()
        show_main_instructions()
    elif i == 9:
        functions.generate_login()
        show_main_instructions()
    else:
        print("–¢–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ—Ç!ü§∑")
        show_main_instructions()  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
